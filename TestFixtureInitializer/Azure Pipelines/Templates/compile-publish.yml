parameters:
  navAppVersion: '1.0.[yyyyWW].*'
  runTestSuite: 'true'
  disabledTests: ''
  createSqlBackup: 'disabled'

steps:   
- task: ALOpsAppCompiler@1
  displayName: 'ALOPS - Compile Extension: App'
  inputs:
    usedocker: true
    nav_app_version: ${{ parameters['navAppVersion'] }}
    targetproject: 'TestFixtureInitializer/app/app.json'
    app_file_suffix: '_APP'

- task: ALOpsAppPublish@1
  displayName: 'ALOPS - Publish Extension'
  inputs:
    usedocker: true
    nav_artifact_app_filter: '*.app'
    skip_verification: true

- task: ALOpsAppCompiler@1
  displayName: 'ALOPS - Compile Extension: Test-App'
  inputs:
    usedocker: true
    nav_app_version: ${{ parameters['navAppVersion'] }}
    targetproject: 'TestFixtureInitializer/test/app.json'
    failed_on_warnings: true    
    app_file_suffix: '_TEST'

- task: ALOpsAppPublish@1
  displayName: 'ALOPS - Publish Extension'
  inputs:
    usedocker: true
    nav_artifact_app_filter: '*.app'
    skip_verification: true   

- task: ALOpsAppTest@1
  displayName: 'ALOPS - Run TestSuite'
  enabled: ${{ parameters['runTestSuite'] }}
  inputs:
    usedocker: true
    disabledtests: ${{ parameters['disabledTests'] }}
    import_testtoolkit: false
    import_action: 'Skip'
    testpage: '130455'
    testsuite: 'DEFAULT'
    failed_test_action: 'Ignore'
  continueOnError: true
  timeoutInMinutes: 45

- task: PublishPipelineArtifact@1
  enabled: ${{ parameters['run_test_suite'] }}
  displayName: 'Publish Artifact Test Results **/TestResults.xml'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/TestResults.xml'
    artifact: 'TestResults.xml'
    publishLocation: 'pipeline'

- task: PublishTestResults@2
  enabled: ${{ parameters['run_test_suite'] }}
  displayName: 'Publish Test Results **/TestResults.xml'
  inputs:
    testResultsFormat: XUnit
    testResultsFiles: '**/TestResults.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'BC Test Results: $(Build.BuildId)'

- task: ALOpsDockerRemove@1
  displayName: 'ALOPS - Remove Docker Container'
  enabled: true
  condition: always()
  inputs:
    createsqlbackup: ${{ parameters['createSqlBackup'] }}
